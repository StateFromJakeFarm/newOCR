#!/usr/bin/python3

from img_funcs import *
from basic_funcs import *
from ann import *
import os
import sys
import argparse

def main():
    # Parse command line args
    parser = argparse.ArgumentParser(description='A basic, for-the-fun-of-it, non-convolutional OCR neural network', \
        prog='ocr')
    parser.add_argument('-t', '--train_dir', type=str, default=None,
        help='train OCR on the images in a properly-structured directory of character images')
    parser.add_argument('-d', '--dimension', type=int, default=10,
        help='side length of images to be fed to network (default is 10)')
    parser.add_argument('-k', '--keep', action='store_true', default=False,
        help='flag to keep converted training/testing images (default is False)')
    parser.add_argument('-n', '--new', action='store_true',
        help='flag to set whether or not to remake all the formatted images for a training directory if it already exists (default is False)')
    parser.add_argument('-l', '--load', type=str, default=None,
        help='file containing saved ANN or simply the structure to be trained')
    parser.add_argument('-s', '--save', type=str, default='',
        help='name of save file for trained ANN')
    parser.add_argument('-a', '--alpha', type=float, default=0.001,
        help='the alpha value for error propagation')
    parser.add_argument('-i', '--iters', type=int, default=200,
        help='number of training iterations to run on the training images')
    parser.add_argument('-r', '--read', type=str, default=None,
        help='directory containing images to be OCR\'d by ANN')
    args = parser.parse_args()

    # Format the images for the ANN
    if args.load or (args.train_dir and os.path.isdir(args.train_dir) and args.load):
        formatted_dir = None
        if args.train_dir:
            formatted_dir = args.train_dir.strip('/\\') + 'Formatted'

            # Only remake all the images if the formatted images directory doesn't
            # exist OR the user wants to remake all the formatted images regardless
            if args.new or not os.path.isdir(formatted_dir):
                if os.path.isdir(formatted_dir):
                    shutil.rmtree(formatted_dir)
                create_formatted(args.train_dir, formatted_dir, args.dimension)

        # Construct the OCR ANN
        my_ann = ANN(formatted_dir, args.read, args.load, args.alpha, args.iters)
        my_ann.build()

        # Train if we have a training directory
        if formatted_dir:
            my_ann.backpropagate(formatted_dir)
            my_ann.save(args.save)
        # Classify if we have a read directory
        if args.read:
            my_ann.read()
        else:
            print('No images provided for classification')

        # Remove the old traning images directory before creating new ones
        if formatted_dir and not args.keep and os.path.isdir(formatted_dir):
            shutil.rmtree(formatted_dir)
    else:
        print("ERROR: must provide properly-structured images directory and save file")


if __name__ == '__main__':
    main()
